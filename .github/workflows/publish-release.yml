name: Sync VERSION on Release Publish

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  sync-version:
    name: Sync VERSION File
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: master
          fetch-depth: 0

      - name: Extract version from release tag
        id: get-version
        run: |
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION="${TAG_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from tag: $TAG_NAME"

      - name: Read current VERSION file
        id: current-version
        run: |
          CURRENT_VERSION=$(cat VERSION | tr -d '\n' | tr -d ' ')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current VERSION file: $CURRENT_VERSION"

      - name: Update VERSION file if different
        id: update-version
        run: |
          NEW_VERSION="${{ steps.get-version.outputs.version }}"
          CURRENT_VERSION="${{ steps.current-version.outputs.current }}"
          
          if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "✅ VERSION file already matches release: $NEW_VERSION"
          else
            echo "$NEW_VERSION" > VERSION
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "📝 Updated VERSION file: $CURRENT_VERSION -> $NEW_VERSION"
          fi

      - name: Commit and push VERSION change
        if: steps.update-version.outputs.updated == 'true'
        run: |
          NEW_VERSION="${{ steps.get-version.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add VERSION
          git commit -m "Sync VERSION to $NEW_VERSION after release [skip ci]"
          git push origin master
          
          echo "✅ VERSION file synced to $NEW_VERSION"

      - name: Update internal VERSION file
        if: steps.update-version.outputs.updated == 'true'
        run: |
          NEW_VERSION="${{ steps.get-version.outputs.version }}"
          cp VERSION internal/app/VERSION
          
          git add internal/app/VERSION
          git commit -m "Update internal VERSION to $NEW_VERSION [skip ci]" || echo "No changes to internal/app/VERSION"
          git push origin master || echo "Nothing to push"

      - name: Summary
        run: |
          echo "## Release Published - VERSION Sync" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.event.release.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-version.outputs.updated }}" = "true" ]; then
            echo "✅ VERSION file updated and committed to master" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ VERSION file already in sync" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY
